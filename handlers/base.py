from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging
from database import db_connection
from keyboards import get_student_keyboard, get_admin_keyboard
from utils import get_user_role, create_fake_update

logger = logging.getLogger(__name__)

class BaseHandlers:
    """–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        user_name = update.effective_user.full_name
        
        try:
            role = await get_user_role(user_id)
            
            if role in ['admin', 'headman']:
                welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n–í–∞—à–∞ —Ä–æ–ª—å: {role}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                keyboard = get_admin_keyboard(role)
                
            elif role == 'student':
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT full_name FROM students WHERE telegram_id = ?", (user_id,))
                    result = cur.fetchone()
                
                if result:
                    full_name = result['full_name']
                    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n–Ø —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    keyboard = get_student_keyboard()
                else:
                    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?"
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register_student')],
                        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
                    ])
                
            else:
                welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register_student')],
                    [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
                ])
            
            await update.message.reply_text(welcome_text, reply_markup=keyboard)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ UniHelperBot - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
        """
        await update.message.reply_text(help_text)
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    async def back_to_main_menu(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = query.from_user.id
        
        try:
            role = await get_user_role(user_id)
            
            if role in ['admin', 'headman']:
                keyboard = get_admin_keyboard(role)
                await query.edit_message_text("üë®‚Äçüíº –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                
            elif role == 'student':
                keyboard = get_student_keyboard()
                await query.edit_message_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                
            else:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register_student')],
                    [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
                ])
                await query.edit_message_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ:", reply_markup=keyboard)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
            await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def back_to_management(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏"""
        from .admin import AdminHandlers
        admin_handlers = AdminHandlers()
        fake_update = create_fake_update(query)
        await admin_handlers.start_student_management(fake_update, {})
    
    async def back_to_groups_management(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        from .group import GroupHandlers
        group_handlers = GroupHandlers()
        fake_update = create_fake_update(query)
        await group_handlers.start_group_management(fake_update, {})
    
    async def back_to_subjects_management(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"""
        from .subject import SubjectHandlers
        subject_handlers = SubjectHandlers()
        fake_update = create_fake_update(query)
        await subject_handlers.start_subject_management(fake_update, {})