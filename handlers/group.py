from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from database import db_connection
from config import MANAGE_GROUPS, ADD_GROUP_NAME, EDIT_GROUP_SELECT, EDIT_GROUP_NAME, DELETE_GROUP
from utils import check_admin_rights
from keyboards import get_back_button, get_main_menu_button

logger = logging.getLogger(__name__)

class GroupHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
    
    async def start_group_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query=None):
        """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        if query is None:
            query = update.callback_query
            await query.answer()
        
        if not await check_admin_rights(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return ConversationHandler.END
        
        keyboard = [
            [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", callback_data='list_groups')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data='add_group')],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data='edit_group')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data='delete_group')],
            get_back_button('main')[0]
        ]
        
        await query.edit_message_text(
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MANAGE_GROUPS

    async def manage_groups_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'list_groups':
            await self.list_groups(query)
            return MANAGE_GROUPS
            
        elif data == 'add_group':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:")
            return ADD_GROUP_NAME
            
        elif data == 'edit_group':
            await self.show_groups_for_edit(query)
            return EDIT_GROUP_SELECT
            
        elif data == 'delete_group':
            await self.show_groups_for_delete(query)
            return DELETE_GROUP
            
        elif data == 'back_to_main':
            from .base import BaseHandlers
            base_handlers = BaseHandlers()
            await base_handlers.back_to_main_menu(query)
            return ConversationHandler.END
            
        return MANAGE_GROUPS

    async def add_group_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
        group_name = update.message.text.strip()
        
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                cur.execute("SELECT id FROM groups WHERE name = ?", (group_name,))
                if cur.fetchone():
                    await update.message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return ConversationHandler.END
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
                cur.execute("INSERT INTO groups (name) VALUES (?)", (group_name,))
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≥—Ä—É–ø–ø–∞–º–∏", callback_data='back_to_groups_management')],
                get_main_menu_button()
            ]
            
            await update.message.reply_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")
        
        return ConversationHandler.END

    async def show_groups_for_edit(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, name FROM groups ORDER BY name")
                groups = cur.fetchall()
                
                if groups:
                    keyboard = []
                    for group in groups:
                        keyboard.append([InlineKeyboardButton(group['name'], callback_data=f'edit_group_{group["id"]}')])
                    
                    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_groups_management')])
                    
                    await query.edit_message_text(
                        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.edit_message_text("üìù –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def edit_group_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_groups_management':
            await self.start_group_management(update, context, query)
            return MANAGE_GROUPS
        
        if query.data.startswith('edit_group_'):
            group_id = int(query.data.split('_')[2])
            context.user_data['edit_group_id'] = group_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                
                keyboard = [get_back_button('groups_management')]
                
                await query.edit_message_text(
                    f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {group_name}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return EDIT_GROUP_NAME
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        return MANAGE_GROUPS

    async def edit_group_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
        new_group_name = update.message.text.strip()
        group_id = context.user_data['edit_group_id']
        
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                cur.execute("SELECT id FROM groups WHERE name = ? AND id != ?", (new_group_name, group_id))
                if cur.fetchone():
                    await update.message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return ConversationHandler.END
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                cur.execute("UPDATE groups SET name = ? WHERE id = ?", (new_group_name, group_id))
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≥—Ä—É–ø–ø–∞–º–∏", callback_data='back_to_groups_management')],
                get_main_menu_button()
            ]
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_group_name}'!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")
        
        return ConversationHandler.END

    async def show_groups_for_delete(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, name FROM groups ORDER BY name")
                groups = cur.fetchall()
                
                if groups:
                    keyboard = []
                    for group in groups:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
                        cur.execute("SELECT COUNT(*) FROM students WHERE group_id = ?", (group['id'],))
                        student_count = cur.fetchone()[0]
                        
                        btn_text = f"{group['name']} ({student_count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)"
                        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f'delete_group_{group["id"]}')])
                    
                    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_groups_management')])
                    
                    await query.edit_message_text(
                        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n(–≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.edit_message_text("üìù –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def delete_group_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_groups_management':
            await self.start_group_management(update, context, query)
            return MANAGE_GROUPS
        
        if query.data.startswith('delete_group_'):
            group_id = int(query.data.split('_')[2])
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
                    cur.execute("SELECT COUNT(*) FROM students WHERE group_id = ?", (group_id,))
                    student_count = cur.fetchone()[0]
                    
                    if student_count > 0:
                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏", callback_data=f'confirm_delete_group_with_students_{group_id}')],
                            [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data=f'move_students_{group_id}')],
                            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_delete_group')]
                        ]
                        
                        await query.edit_message_text(
                            f"‚ö†Ô∏è –í –≥—Ä—É–ø–ø–µ '{group_name}' –µ—Å—Ç—å {student_count} —Å—Ç—É–¥–µ–Ω—Ç(–æ–≤)!\n\n"
                            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    else:
                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_group_{group_id}')],
                            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel_delete_group')]
                        ]
                        
                        await query.edit_message_text(
                            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{group_name}'?",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    
                    return DELETE_GROUP
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        elif query.data.startswith('confirm_delete_group_'):
            group_id = int(query.data.split('_')[3])
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    cur.execute("DELETE FROM groups WHERE id = ?", (group_id,))
                    conn.commit()
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≥—Ä—É–ø–ø–∞–º–∏", callback_data='back_to_groups_management')],
                    get_main_menu_button()
                ]
                
                await query.edit_message_text(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É–¥–∞–ª–µ–Ω–∞!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")
        
        elif query.data == 'cancel_delete_group':
            await self.start_group_management(update, context, query)
            return MANAGE_GROUPS
        
        return ConversationHandler.END

    async def list_groups(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT g.id, g.name, COUNT(s.id) as student_count
                    FROM groups g
                    LEFT JOIN students s ON g.id = s.group_id
                    GROUP BY g.id
                    ORDER BY g.name
                """)
                
                groups = cur.fetchall()
                
                if groups:
                    text = "üìö –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø:\n\n"
                    for group in groups:
                        text += f"‚Ä¢ {group['name']} - {group['student_count']} —Å—Ç—É–¥–µ–Ω—Ç(–æ–≤)\n"
                    
                    text += f"\n–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(groups)}"
                else:
                    text = "üìù –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                keyboard = [
                    get_back_button('groups_management')[0],
                    get_main_menu_button()
                ]
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")