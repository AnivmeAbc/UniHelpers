from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from database import db_connection
from config import MANAGE_STUDENTS, ADD_STUDENT_NAME, ADD_STUDENT_GROUP, EDIT_STUDENT_SELECT, DELETE_STUDENT
from utils import check_admin_rights
from keyboards import get_groups_keyboard, get_back_button, get_main_menu_button

logger = logging.getLogger(__name__)

class AdminHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    async def start_student_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query=None):
        """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏"""
        if query is None:
            query = update.callback_query
            await query.answer()
        
        if not await check_admin_rights(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return ConversationHandler.END
        
        keyboard = [
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", callback_data='list_students')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data='add_student')],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data='edit_student')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data='delete_student')],
            get_back_button('main')[0]
        ]
        
        await query.edit_message_text(
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MANAGE_STUDENTS
    
    async def manage_students_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'list_students':
            await self.list_students(query)
            return MANAGE_STUDENTS
            
        elif data == 'add_student':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
            return ADD_STUDENT_NAME
            
        elif data == 'edit_student':
            await self.show_students_for_edit(query)
            return EDIT_STUDENT_SELECT
            
        elif data == 'delete_student':
            await self.show_students_for_delete(query)
            return DELETE_STUDENT
            
        elif data == 'back_to_main':
            from .base import BaseHandlers
            base_handlers = BaseHandlers()
            await base_handlers.back_to_main_menu(query)
            return ConversationHandler.END
            
        return MANAGE_STUDENTS

    async def add_student_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        context.user_data['new_student'] = {'name': update.message.text}
        
        try:
            keyboard = get_groups_keyboard()
            keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='cancel_add')])
            
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {update.message.text}:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ADD_STUDENT_GROUP
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø")
            return ConversationHandler.END
    
    async def add_student_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'cancel_add':
            await self.start_student_management(update, context, query)
            return MANAGE_STUDENTS
        
        if query.data.startswith('group_'):
            group_id = int(query.data.split('_')[1])
            student_name = context.user_data['new_student']['name']
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute(
                        "INSERT INTO students (full_name, group_id) VALUES (?, ?)",
                        (student_name, group_id)
                    )
                    conn.commit()
                    
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏", callback_data='back_to_management')],
                    get_main_menu_button()
                ]
                
                await query.edit_message_text(
                    f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {student_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_name}!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        
        return ConversationHandler.END

    async def show_students_for_edit(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT s.id, s.full_name, g.name 
                    FROM students s 
                    JOIN groups g ON s.group_id = g.id 
                    ORDER BY g.name, s.full_name
                """)
                students = cur.fetchall()
                
                if students:
                    keyboard = []
                    for student in students:
                        btn_text = f"{student['full_name']} ({student['name']})"
                        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f'edit_{student["id"]}')])
                    
                    keyboard.append(get_back_button('management'))
                    
                    await query.edit_message_text(
                        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.edit_message_text("üìù –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def edit_student_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_management':
            await self.start_student_management(update, context, query)
            return MANAGE_STUDENTS
        
        if query.data.startswith('edit_'):
            student_id = int(query.data.split('_')[1])
            keyboard = [get_back_button('management')]
            await query.edit_message_text(
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: {student_id}\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return MANAGE_STUDENTS
        
        return MANAGE_STUDENTS

    async def show_students_for_delete(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT s.id, s.full_name, g.name 
                    FROM students s 
                    JOIN groups g ON s.group_id = g.id 
                    ORDER BY g.name, s.full_name
                """)
                students = cur.fetchall()
                
                if students:
                    keyboard = []
                    for student in students:
                        btn_text = f"{student['full_name']} ({student['name']})"
                        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f'delete_{student["id"]}')])
                    
                    keyboard.append(get_back_button('management'))
                    
                    await query.edit_message_text(
                        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.edit_message_text("üìù –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def delete_student_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_management':
            await self.start_student_management(update, context, query)
            return MANAGE_STUDENTS
        
        if query.data.startswith('delete_'):
            student_id = int(query.data.split('_')[1])
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT full_name FROM students WHERE id = ?", (student_id,))
                    student_name = cur.fetchone()['name']
                    
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_{student_id}')],
                        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel_delete')]
                    ]
                    
                    await query.edit_message_text(
                        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name}?",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return DELETE_STUDENT
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        elif query.data.startswith('confirm_delete_'):
            student_id = int(query.data.split('_')[2])
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT full_name FROM students WHERE id = ?", (student_id,))
                    student_name = cur.fetchone()['name']
                    cur.execute("DELETE FROM students WHERE id = ?", (student_id,))
                    conn.commit()
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏", callback_data='back_to_management')],
                    get_main_menu_button()
                ]
                
                await query.edit_message_text(
                    f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {student_name} —É–¥–∞–ª–µ–Ω!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        
        elif query.data == 'cancel_delete':
            await self.start_student_management(update, context, query)
            return MANAGE_STUDENTS
        
        return ConversationHandler.END

    async def list_students(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT s.id, s.full_name, g.name, s.telegram_id 
                    FROM students s 
                    JOIN groups g ON s.group_id = g.id 
                    ORDER BY g.name, s.full_name
                """)
                students = cur.fetchall()
                
                if students:
                    text = "üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
                    current_group = None
                    
                    for student in students:
                        if student['name'] != current_group:
                            text += f"\nüìö –ì—Ä—É–ø–ø–∞: {student['name']}\n"
                            current_group = student['name']
                        
                        status = "‚úÖ –í –±–æ—Ç–µ" if student['telegram_id'] else "‚ùå –ù–µ –≤ –±–æ—Ç–µ"
                        text += f"‚Ä¢ {student['full_name']} ({status})\n"
                    
                    text += f"\n–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}"
                else:
                    text = "üìù –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                keyboard = [
                    get_back_button('management')[0],
                    get_main_menu_button()
                ]
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")