from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from datetime import datetime, timedelta
from database import db_connection
from config import SELECT_GROUP_ATTENDANCE, SELECT_SUBJECT_ATTENDANCE, SELECT_DATE_ATTENDANCE, MARK_STUDENTS_ATTENDANCE, SELECT_REPORT_GROUP, SELECT_REPORT_DATE_RANGE, GENERATE_REPORT
from utils import check_admin_rights, get_user_role
from keyboards import get_back_button, get_main_menu_button, get_groups_keyboard
import pandas as pd
from io import BytesIO
import numpy as np

logger = logging.getLogger(__name__)

class AttendanceHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    
    async def start_attendance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
        if not await check_admin_rights(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, name FROM groups ORDER BY name")
                groups = cur.fetchall()
                
                if not groups:
                    await query.edit_message_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –≥—Ä—É–ø–ø")
                    return ConversationHandler.END
            
            keyboard = []
            for group in groups:
                keyboard.append([InlineKeyboardButton(group['name'], callback_data=f'attendance_group_{group["id"]}')])
            
            keyboard.append(get_back_button('main'))
            
            await query.edit_message_text(
                "üìä –û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SELECT_GROUP_ATTENDANCE
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø")
            return ConversationHandler.END
    
    async def select_group_attendance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_main':
            from .base import BaseHandlers
            base_handlers = BaseHandlers()
            await base_handlers.back_to_main_menu(query)
            return ConversationHandler.END
        
        if query.data.startswith('attendance_group_'):
            group_id = int(query.data.split('_')[2])
            context.user_data['attendance_group_id'] = group_id
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                    cur.execute("""
                        SELECT s.id, s.name 
                        FROM subjects s
                        JOIN group_subjects gs ON s.id = gs.subject_id
                        WHERE gs.group_id = ?
                        ORDER BY s.name
                    """, (group_id,))
                    
                    subjects = cur.fetchall()
                    
                    if not subjects:
                        keyboard = [get_back_button('main')]
                        await query.edit_message_text(
                            f"‚ùå –í –≥—Ä—É–ø–ø–µ {group_name} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                        return ConversationHandler.END
                    
                    keyboard = []
                    for subject in subjects:
                        keyboard.append([InlineKeyboardButton(subject['name'], callback_data=f'attendance_subject_{subject["id"]}')])
                    
                    keyboard.append(get_back_button('main'))
                    
                    await query.edit_message_text(
                        f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return SELECT_SUBJECT_ATTENDANCE
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        
        return ConversationHandler.END
    
    async def select_subject_attendance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('attendance_subject_'):
            subject_id = int(query.data.split('_')[2])
            group_id = context.user_data['attendance_group_id']
            
            # –ü–æ–ª—É—á–∞–µ–º group_subject_id
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    cur.execute("""
                        SELECT id FROM group_subjects 
                        WHERE group_id = ? AND subject_id = ?
                    """, (group_id, subject_id))
                    
                    group_subject = cur.fetchone()
                    if not group_subject:
                        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–≤—è–∑—å –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –≥—Ä—É–ø–ø–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        return ConversationHandler.END
                    
                    group_subject_id = group_subject['id']
                    context.user_data['attendance_group_subject_id'] = group_subject_id
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    cur.execute("SELECT name FROM subjects WHERE id = ?", (subject_id,))
                    subject_name = cur.fetchone()['name']
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
                today = datetime.now().strftime('%Y-%m-%d')
                keyboard = [
                    [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f'attendance_date_{today}')],
                    [InlineKeyboardButton("üìÖ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data='enter_date_manually')],
                    get_back_button('main')[0]
                ]
                
                await query.edit_message_text(
                    f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:\n–ì—Ä—É–ø–ø–∞: {group_name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject_name}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return SELECT_DATE_ATTENDANCE
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        return ConversationHandler.END
    
    async def select_date_attendance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('attendance_date_'):
            date_str = query.data.split('_')[2]
            context.user_data['attendance_date'] = date_str
            await self.show_students_for_attendance(query, context)
            return MARK_STUDENTS_ATTENDANCE
        
        elif query.data == 'enter_date_manually':
            await query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-01-15):")
            return SELECT_DATE_ATTENDANCE
        
        return ConversationHandler.END
    
    async def enter_date_manually(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        try:
            date_str = update.message.text.strip()
            datetime.strptime(date_str, '%Y-%m-%d')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            context.user_data['attendance_date'] = date_str
            await self.show_students_for_attendance(None, context, update)
            return MARK_STUDENTS_ATTENDANCE
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            return SELECT_DATE_ATTENDANCE
    
    async def show_students_for_attendance(self, query, context, update=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
        group_id = context.user_data['attendance_group_id']
        group_subject_id = context.user_data['attendance_group_subject_id']
        date_str = context.user_data['attendance_date']
        
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                cur.execute("""
                    SELECT s.id, s.full_name 
                    FROM students s 
                    WHERE s.group_id = ? 
                    ORDER BY s.full_name
                """, (group_id,))
                students = cur.fetchall()
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º lesson_id
                cur.execute("""
                    SELECT id FROM lessons 
                    WHERE group_subject_id = ? AND date = ?
                """, (group_subject_id, date_str))
                
                lesson = cur.fetchone()
                if lesson:
                    lesson_id = lesson['id']
                else:
                    cur.execute("""
                        INSERT INTO lessons (group_subject_id, date) 
                        VALUES (?, ?)
                    """, (group_subject_id, date_str))
                    lesson_id = cur.lastrowid
                    conn.commit()
                
                context.user_data['attendance_lesson_id'] = lesson_id
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
                attendance_status = {}
                cur.execute("""
                    SELECT student_id, status FROM attendance 
                    WHERE lesson_id = ?
                """, (lesson_id,))
                
                for row in cur.fetchall():
                    attendance_status[row['student_id']] = row['status']
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                cur.execute("""
                    SELECT g.name, s.name 
                    FROM group_subjects gs
                    JOIN groups g ON gs.group_id = g.id
                    JOIN subjects s ON gs.subject_id = s.id
                    WHERE gs.id = ?
                """, (group_subject_id,))
                
                group_name, subject_name = cur.fetchone()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û!
                keyboard = []
                for student in students:
                    current_status = attendance_status.get(student['id'], 'not_set')
                    status_icon = '‚úÖ' if current_status == 'present' else '‚ùå' if current_status == 'absent' else '‚è∞' if current_status == 'late' else '‚ö™'
                    
                    # –ö–∞–∂–¥—ã–π —Å—Ç—É–¥–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    student_row = [
                        InlineKeyboardButton(f"{status_icon} {student['full_name']}", callback_data=f'student_{student["id"]}')
                    ]
                    
                    # –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä—è–¥–∞—Ö –ø–æ–¥ –∏–º–µ–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
                    status_row = [
                        InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f'mark_present_{student["id"]}'),
                        InlineKeyboardButton("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª", callback_data=f'mark_absent_{student["id"]}'),
                        InlineKeyboardButton("‚è∞ –û–ø–æ–∑–¥–∞–ª", callback_data=f'mark_late_{student["id"]}')
                    ]
                    
                    keyboard.append(student_row)
                    keyboard.append(status_row)
                
                # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å", callback_data='save_attendance')])
                keyboard.append(get_back_button('main')[0])
                
                message_text = f"üìä –û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n\n–ì—Ä—É–ø–ø–∞: {group_name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject_name}\n–î–∞—Ç–∞: {date_str}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:"
                
                if query:
                    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
                else:
                    await update.message.reply_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
            if query:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    
    async def mark_student_attendance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('mark_'):
            action, student_id = query.data.split('_')[1], int(query.data.split('_')[2])
            lesson_id = context.user_data['attendance_lesson_id']
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
                    cur.execute("""
                        INSERT OR REPLACE INTO attendance (student_id, lesson_id, status)
                        VALUES (?, ?, ?)
                    """, (student_id, lesson_id, action))
                    
                    conn.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                await self.show_students_for_attendance(query, context)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        
        elif query.data == 'save_attendance':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
            group_id = context.user_data['attendance_group_id']
            
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                group_name = cur.fetchone()['name']
            
            keyboard = [
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data='back_to_management')],
                get_main_menu_button()
            ]
            
            await query.edit_message_text(
                f"‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return ConversationHandler.END
        
        return MARK_STUDENTS_ATTENDANCE
    
    async def show_my_attendance(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        user_id = query.from_user.id
        
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
                cur.execute("""
                    SELECT s.id, s.full_name, g.name, s.group_id
                    FROM students s 
                    JOIN groups g ON s.group_id = g.id 
                    WHERE s.telegram_id = ?
                """, (user_id,))
                
                student = cur.fetchone()
                if not student:
                    await query.edit_message_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
                cur.execute("""
                    SELECT 
                        COUNT(*) as total_lessons,
                        SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) as present,
                        SUM(CASE WHEN a.status = 'absent' THEN 1 ELSE 0 END) as absent,
                        SUM(CASE WHEN a.status = 'late' THEN 1 ELSE 0 END) as late
                    FROM lessons l
                    JOIN group_subjects gs ON l.group_subject_id = gs.id
                    LEFT JOIN attendance a ON l.id = a.lesson_id AND a.student_id = ?
                    WHERE gs.group_id = ?
                """, (student['id'], student['group_id']))
                
                stats = cur.fetchone()
                total, present, absent, late = stats if stats else (0, 0, 0, 0)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
                cur.execute("""
                    SELECT s.name, l.date, a.status
                    FROM lessons l
                    JOIN group_subjects gs ON l.group_subject_id = gs.id
                    JOIN subjects s ON gs.subject_id = s.id
                    LEFT JOIN attendance a ON l.id = a.lesson_id AND a.student_id = ?
                    WHERE gs.group_id = ?
                    ORDER BY l.date DESC
                    LIMIT 10
                """, (student['id'], student['group_id']))
                
                recent_lessons = cur.fetchall()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = f"üìä –í–∞—à–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å\n\nüë§ {student['full_name']}\nüìö –ì—Ä—É–ø–ø–∞: {student['name']}\n\n"
                text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total}\n"
                if total > 0:
                    attendance_percent = (present / total) * 100
                    text += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {present} ({attendance_percent:.1f}%)\n"
                else:
                    text += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: 0\n"
                text += f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {absent}\n"
                text += f"‚Ä¢ –û–ø–æ–∑–¥–∞–ª: {late}\n\n"
                
                text += "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n"
                for lesson in recent_lessons:
                    status_icon = '‚úÖ' if lesson['status'] == 'present' else '‚ùå' if lesson['status'] == 'absent' else '‚è∞' if lesson['status'] == 'late' else '‚ùì'
                    text += f"‚Ä¢ {lesson['date']} - {lesson['name']} {status_icon}\n"
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='my_attendance')],
                    get_main_menu_button()
                ]
                
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")
    
    async def generate_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
            query = update.callback_query
            await query.answer()
            
            if not await check_admin_rights(query.from_user.id):
                await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return ConversationHandler.END
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT id, name FROM groups ORDER BY name")
                    groups = cur.fetchall()
                    
                    if not groups:
                        await query.edit_message_text("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –≥—Ä—É–ø–ø")
                        return ConversationHandler.END
                
                keyboard = []
                for group in groups:
                    keyboard.append([InlineKeyboardButton(group['name'], callback_data=f'report_group_{group["id"]}')])
                
                keyboard.append(get_back_button('main'))
                
                await query.edit_message_text(
                    "üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return SELECT_REPORT_GROUP
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø")
                return ConversationHandler.END
        
    async def select_report_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_main':
            from .base import BaseHandlers
            base_handlers = BaseHandlers()
            await base_handlers.back_to_main_menu(query)
            return ConversationHandler.END
        
        if query.data.startswith('report_group_'):
            group_id = int(query.data.split('_')[2])
            context.user_data['report_group_id'] = group_id
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥
            today = datetime.now()
            week_ago = today - timedelta(days=7)
            month_ago = today - timedelta(days=30)
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é", callback_data=f'report_period_week_{group_id}')],
                [InlineKeyboardButton("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data=f'report_period_month_{group_id}')],
                [InlineKeyboardButton("üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data=f'report_period_all_{group_id}')],
                [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã", callback_data=f'report_period_custom_{group_id}')],
                get_back_button('main')[0]
            ]
            
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SELECT_REPORT_DATE_RANGE
        
        return ConversationHandler.END

    async def select_report_date_range(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('report_period_'):
            parts = query.data.split('_')
            period_type = parts[2]
            group_id = int(parts[3])
            
            today = datetime.now()
            start_date = None
            end_date = today
            
            if period_type == 'week':
                start_date = today - timedelta(days=7)
            elif period_type == 'month':
                start_date = today - timedelta(days=30)
            elif period_type == 'all':
                start_date = datetime(2020, 1, 1)  # Very old date to get all records
            elif period_type == 'custom':
                await query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
                return SELECT_REPORT_DATE_RANGE
            
            context.user_data['report_start_date'] = start_date
            context.user_data['report_end_date'] = end_date
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            await self.generate_excel_report(query, context, group_id, start_date, end_date)
            return ConversationHandler.END
        
        return ConversationHandler.END

    async def enter_custom_date_range(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
        try:
            date_str = update.message.text.strip()
            start_date = datetime.strptime(date_str, '%Y-%m-%d')
            
            context.user_data['report_start_date'] = start_date
            await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
            return GENERATE_REPORT
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            return SELECT_REPORT_DATE_RANGE

    async def generate_final_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞—Ç–∞–º–∏"""
        try:
            end_date_str = update.message.text.strip()
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d')
            start_date = context.user_data['report_start_date']
            group_id = context.user_data['report_group_id']
            
            await self.generate_excel_report(None, context, group_id, start_date, end_date, update)
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            return GENERATE_REPORT

    async def generate_excel_report(self, query, context, group_id, start_date, end_date, update=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –æ—Ç—á–µ—Ç–∞"""
        try:
            with db_connection() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                cur = conn.cursor()
                cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                group_name = cur.fetchone()['name']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
                start_date_str = start_date.strftime('%Y-%m-%d') if start_date else '2000-01-01'
                end_date_str = end_date.strftime('%Y-%m-%d') if end_date else '2100-01-01'
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
                attendance_df = pd.read_sql(f"""
                    SELECT 
                        g.name as group_name,
                        s.full_name as student_name,
                        sub.name as subject_name,
                        l.date as lesson_date,
                        CASE 
                            WHEN a.status = 'present' THEN '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'
                            WHEN a.status = 'absent' THEN '–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª'
                            WHEN a.status = 'late' THEN '–û–ø–æ–∑–¥–∞–ª'
                            ELSE '–ù–µ –æ—Ç–º–µ—á–µ–Ω'
                        END as attendance_status,
                        CASE 
                            WHEN a.status = 'present' THEN 1
                            WHEN a.status = 'absent' THEN 0
                            WHEN a.status = 'late' THEN 0.5
                            ELSE NULL
                        END as attendance_score
                    FROM lessons l
                    JOIN group_subjects gs ON l.group_subject_id = gs.id
                    JOIN groups g ON gs.group_id = g.id
                    JOIN subjects sub ON gs.subject_id = sub.id
                    JOIN students s ON s.group_id = g.id
                    LEFT JOIN attendance a ON l.id = a.lesson_id AND a.student_id = s.id
                    WHERE g.id = ? 
                    AND l.date BETWEEN ? AND ?
                    ORDER BY s.full_name, l.date
                """, conn, params=(group_id, start_date_str, end_date_str))
                
                if attendance_df.empty:
                    if query:
                        await query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    else:
                        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                    return
                
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
                output = BytesIO()
                
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    # –õ–∏—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é
                    attendance_df.to_excel(writer, sheet_name='–î–µ—Ç–∞–ª—å–Ω–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å', index=False)
                    
                    # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
                    student_stats = attendance_df.groupby(['student_name', 'attendance_status']).size().unstack(fill_value=0)
                    student_stats['–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π'] = student_stats.sum(axis=1)
                    student_stats['–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'] = (
                        (student_stats.get('–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª', 0) + student_stats.get('–û–ø–æ–∑–¥–∞–ª', 0) * 0.5) / 
                        student_stats['–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π'] * 100
                    ).round(1)
                    student_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
                    
                    # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
                    subject_stats = attendance_df.groupby(['subject_name', 'attendance_status']).size().unstack(fill_value=0)
                    subject_stats['–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π'] = subject_stats.sum(axis=1)
                    subject_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º')
                    
                    # –õ–∏—Å—Ç —Å –æ–±—â–µ–π —Å–≤–æ–¥–∫–æ–π
                    summary_data = {
                        '–ü–∞—Ä–∞–º–µ—Ç—Ä': ['–ì—Ä—É–ø–ø–∞', '–ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞', '–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π', '–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', '–°—Ä–µ–¥–Ω—è—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å'],
                        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                            group_name,
                            f'{start_date_str} - {end_date_str}',
                            len(attendance_df['lesson_date'].unique()),
                            attendance_df['student_name'].nunique(),
                            f"{student_stats['–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏'].mean():.1f}%"
                        ]
                    }
                    summary_df = pd.DataFrame(summary_data)
                    summary_df.to_excel(writer, sheet_name='–û–±—â–∞—è —Å–≤–æ–¥–∫–∞', index=False)
                
                output.seek(0)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                filename = f"–æ—Ç—á–µ—Ç_{group_name}_{start_date_str}_{end_date_str}.xlsx"
                
                if query:
                    await query.message.reply_document(
                        document=output,
                        filename=filename,
                        caption=f'üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n–ì—Ä—É–ø–ø–∞: {group_name}\n–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}'
                    )
                else:
                    await update.message.reply_document(
                        document=output,
                        filename=filename,
                        caption=f'üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n–ì—Ä—É–ø–ø–∞: {group_name}\n–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}'
                    )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
            if query:
                await query.edit_message_text(error_msg)
            else:
                await update.message.reply_text(error_msg)

    async def generate_quick_report(self, query):
        """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (–±–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"""
        try:
            with db_connection() as conn:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö
                end_date = datetime.now()
                start_date = end_date - timedelta(days=30)
                
                # –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
                summary_df = pd.read_sql("""
                    SELECT 
                        g.name as group_name,
                        COUNT(DISTINCT l.id) as total_lessons,
                        COUNT(DISTINCT s.id) as total_students,
                        ROUND(SUM(CASE WHEN a.status = 'present' THEN 1 
                                        WHEN a.status = 'late' THEN 0.5 
                                        ELSE 0 END) * 100.0 / COUNT(a.id), 1) as attendance_percent
                    FROM groups g
                    LEFT JOIN students s ON g.id = s.group_id
                    LEFT JOIN group_subjects gs ON g.id = gs.group_id
                    LEFT JOIN lessons l ON gs.id = l.group_subject_id 
                        AND l.date BETWEEN ? AND ?
                    LEFT JOIN attendance a ON l.id = a.lesson_id AND a.student_id = s.id
                    GROUP BY g.id, g.name
                    ORDER BY g.name
                """, conn, params=(start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')))
                
                if summary_df.empty:
                    await query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
                report_text = "üìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):\n\n"
                
                for _, row in summary_df.iterrows():
                    report_text += f"üë• {row['group_name']}:\n"
                    report_text += f"   ‚Ä¢ –ó–∞–Ω—è—Ç–∏–π: {row['total_lessons']}\n"
                    report_text += f"   ‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {row['total_students']}\n"
                    report_text += f"   ‚Ä¢ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {row['attendance_percent']}%\n\n"
                
                keyboard = [
                    [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data='generate_report')],
                    get_main_menu_button()
                ]
                
                await query.edit_message_text(report_text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")