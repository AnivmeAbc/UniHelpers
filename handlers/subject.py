from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
import logging
from database import db_connection
from config import MANAGE_SUBJECTS, ADD_SUBJECT_NAME, SELECT_GROUP_FOR_SUBJECT, DELETE_SUBJECT
from utils import check_admin_rights
from keyboards import get_groups_keyboard, get_back_button, get_main_menu_button

logger = logging.getLogger(__name__)

class SubjectHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"""
    
    async def start_subject_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE, query=None):
        """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"""
        if query is None:
            query = update.callback_query
            await query.answer()
        
        if not await check_admin_rights(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
            return ConversationHandler.END
        
        keyboard = [
            [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º", callback_data='list_subjects_by_group')],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã", callback_data='add_subject')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã", callback_data='delete_subject')],
            # get_back_button('main')[0]
        ]
        
        await query.edit_message_text(
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MANAGE_SUBJECTS
    
    async def manage_subjects_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == 'list_subjects_by_group':
            await self.show_groups_for_subjects_list(query)
            return MANAGE_SUBJECTS
            
        elif data == 'add_subject':
            await self.show_groups_for_subject_addition(query)
            return SELECT_GROUP_FOR_SUBJECT
            
        elif data == 'delete_subject':
            await self.show_groups_for_subject_deletion(query)
            return DELETE_SUBJECT
            
        elif data == 'back_to_main':
            from .base import BaseHandlers
            base_handlers = BaseHandlers()
            await base_handlers.back_to_main_menu(query)
            return ConversationHandler.END
            
        return MANAGE_SUBJECTS

    async def show_groups_for_subjects_list(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, name FROM groups ORDER BY name")
                groups = cur.fetchall()
                
                if groups:
                    keyboard = []
                    for group in groups:
                        keyboard.append([InlineKeyboardButton(group['name'], callback_data=f'list_subjects_group_{group["id"]}')])
                    
                    keyboard.append(get_back_button('main'))
                    
                    await query.edit_message_text(
                        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await query.edit_message_text("üìù –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def show_subjects_for_group(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        if query.data.startswith('list_subjects_group_'):
            group_id = int(query.data.split('_')[3])
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≥—Ä—É–ø–ø—ã
                    cur.execute("""
                        SELECT s.id, s.name 
                        FROM subjects s
                        JOIN group_subjects gs ON s.id = gs.subject_id
                        WHERE gs.group_id = ?
                        ORDER BY s.name
                    """, (group_id,))
                    
                    subjects = cur.fetchall()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
                    subject_stats = {}
                    for subject in subjects:
                        cur.execute("""
                            SELECT COUNT(*) FROM lessons l
                            JOIN group_subjects gs ON l.group_subject_id = gs.id
                            WHERE gs.group_id = ? AND gs.subject_id = ?
                        """, (group_id, subject['id']))
                        lesson_count = cur.fetchone()[0]
                        subject_stats[subject['id']] = lesson_count
                    
                    if subjects:
                        text = f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã –≥—Ä—É–ø–ø—ã {group_name}:\n\n"
                        for subject in subjects:
                            lesson_count = subject_stats.get(subject['id'], 0)
                            text += f"‚Ä¢ {subject['name']} - {lesson_count} –∑–∞–Ω—è—Ç–∏–π\n"
                    else:
                        text = f"üìù –í –≥—Ä—É–ø–∫–µ {group_name} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
                    
                    keyboard = [
                        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã", callback_data='list_subjects_by_group')],
                        get_main_menu_button()
                    ]
                    
                    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def show_groups_for_subject_addition(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, name FROM groups ORDER BY name")
                groups = cur.fetchall()
                
                if groups:
                    keyboard = []
                    for group in groups:
                        keyboard.append([InlineKeyboardButton(group['name'], callback_data=f'add_subject_group_{group["id"]}')])
                    
                    keyboard.append(get_back_button('main'))
                    
                    await query.edit_message_text(
                        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return SELECT_GROUP_FOR_SUBJECT
                else:
                    await query.edit_message_text("üìù –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def select_group_for_subject(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('add_subject_group_'):
            group_id = int(query.data.split('_')[3])
            context.user_data['subject_group_id'] = group_id
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                
                await query.edit_message_text(
                    f"üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:"
                )
                return ADD_SUBJECT_NAME
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        return SELECT_GROUP_FOR_SUBJECT

    async def add_subject_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        subject_name = update.message.text.strip()
        group_id = context.user_data['subject_group_id']
        
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                group_name = cur.fetchone()['name']
                
                # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                cur.execute("SELECT id FROM subjects WHERE name = ?", (subject_name,))
                subject = cur.fetchone()
                
                if subject:
                    subject_id = subject['id']
                else:
                    cur.execute("INSERT INTO subjects (name) VALUES (?)", (subject_name,))
                    subject_id = cur.lastrowid
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –∫ –≥—Ä—É–ø–ø–µ
                cur.execute("SELECT id FROM group_subjects WHERE group_id = ? AND subject_id = ?", (group_id, subject_id))
                if cur.fetchone():
                    await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã!")
                    return ConversationHandler.END
                
                # –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –≥—Ä—É–ø–ø–æ–π
                cur.execute("INSERT INTO group_subjects (group_id, subject_id) VALUES (?, ?)", (group_id, subject_id))
                conn.commit()
            
            keyboard = [
                [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏", callback_data='back_to_subjects_management')],
                get_main_menu_button()
            ]
            
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
        
        return ConversationHandler.END

    async def show_groups_for_subject_deletion(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            with db_connection() as conn:
                cur = conn.cursor()
                cur.execute("SELECT id, name FROM groups ORDER BY name")
                groups = cur.fetchall()
                
                if groups:
                    keyboard = []
                    for group in groups:
                        keyboard.append([InlineKeyboardButton(group['name'], callback_data=f'delete_subject_group_{group["id"]}')])
                    
                    keyboard.append(get_back_button('main'))
                    
                    await query.edit_message_text(
                        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return DELETE_SUBJECT
                else:
                    await query.edit_message_text("üìù –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

    async def delete_subject_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('delete_subject_group_'):
            group_id = int(query.data.split('_')[3])
            context.user_data['delete_subject_group_id'] = group_id
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≥—Ä—É–ø–ø—ã
                    cur.execute("""
                        SELECT s.id, s.name 
                        FROM subjects s
                        JOIN group_subjects gs ON s.id = gs.subject_id
                        WHERE gs.group_id = ?
                        ORDER BY s.name
                    """, (group_id,))
                    
                    subjects = cur.fetchall()
                    
                    if subjects:
                        keyboard = []
                        for subject in subjects:
                            keyboard.append([InlineKeyboardButton(subject['name'], callback_data=f'delete_this_subject_{subject["id"]}')])
                        
                        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_subjects_management')])
                        
                        await query.edit_message_text(
                            f"üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã {group_name}:",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    else:
                        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_subjects_management')]]
                        await query.edit_message_text(
                            f"üìù –í –≥—Ä—É–ø–ø–µ {group_name} –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        elif query.data.startswith('delete_this_subject_'):
            subject_id = int(query.data.split('_')[2])
            group_id = context.user_data['delete_subject_group_id']
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    cur.execute("SELECT name FROM subjects WHERE id = ?", (subject_id,))
                    subject_name = cur.fetchone()['name']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏—è –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –≤ –≥—Ä—É–ø–ø–µ
                    cur.execute("""
                        SELECT COUNT(*) FROM lessons l
                        JOIN group_subjects gs ON l.group_subject_id = gs.id
                        WHERE gs.group_id = ? AND gs.subject_id = ?
                    """, (group_id, subject_id))
                    
                    lesson_count = cur.fetchone()[0]
                    
                    if lesson_count > 0:
                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å —Å –∑–∞–Ω—è—Ç–∏—è–º–∏", callback_data=f'confirm_delete_subject_with_lessons_{subject_id}')],
                            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_delete_subject')]
                        ]
                        
                        await query.edit_message_text(
                            f"‚ö†Ô∏è –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –≤ –≥—Ä—É–ø–ø–µ {group_name} –µ—Å—Ç—å {lesson_count} –∑–∞–Ω—è—Ç–∏–π!\n\n"
                            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤–º–µ—Å—Ç–µ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏?",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    else:
                        keyboard = [
                            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_subject_{subject_id}')],
                            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel_delete_subject')]
                        ]
                        
                        await query.edit_message_text(
                            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç '{subject_name}' –∏–∑ –≥—Ä—É–ø–ø—ã {group_name}?",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    
                    return DELETE_SUBJECT
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        
        elif query.data.startswith('confirm_delete_subject_'):
            subject_id = int(query.data.split('_')[3])
            group_id = context.user_data['delete_subject_group_id']
            
            try:
                with db_connection() as conn:
                    cur = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
                    cur.execute("SELECT name FROM groups WHERE id = ?", (group_id,))
                    group_name = cur.fetchone()['name']
                    
                    cur.execute("SELECT name FROM subjects WHERE id = ?", (subject_id,))
                    subject_name = cur.fetchone()['name']
                    
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –≥—Ä—É–ø–ø–æ–π
                    cur.execute("""
                        DELETE FROM group_subjects 
                        WHERE group_id = ? AND subject_id = ?
                    """, (group_id, subject_id))
                    
                    conn.commit()
                
                keyboard = [
                    [InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏", callback_data='back_to_subjects_management')],
                    get_main_menu_button()
                ]
                
                await query.edit_message_text(
                    f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_name}!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
        
        elif query.data == 'cancel_delete_subject':
            await self.start_subject_management(update, context)
            return MANAGE_SUBJECTS
        
        return ConversationHandler.END